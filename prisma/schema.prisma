datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL_WITH_SCHEMA")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id       Int    @id @default(autoincrement())
    userId   Int?   @unique
    userRole String @default("guest") @db.VarChar(256)
    username String @db.VarChar(256)
    password String @db.VarChar(256)
    /// Zero is default, 1 is verified
    status   Int    @default(0)

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    session  Session[]
    userInfo UserInfo? @relation(fields: [userId], references: [id])

    @@index([username, password])
    @@map("account")
}

model Session {
    id         Int    @id @default(autoincrement())
    accountId  Int
    userId     Int?
    token      String @unique(map: "token") @db.VarChar(50)
    deviceInfo String @db.VarChar(5000)
    userRole   String @db.VarChar(256)
    data   String @db.VarChar(2000) @default("{}") 

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
    userInfo UserInfo? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([token])
    @@map("session")
}

model UserInfo {
    id             Int      @id @default(autoincrement())
    fullname       String   @db.VarChar(256)
    birthday       DateTime @db.Date
    gender         Int
    phone          String?  @db.VarChar(20)
    email          String?  @db.VarChar(256)
    address        String   @db.VarChar(512)
    description    String   @db.VarChar(5000)
    gpsId Int?
    avatarImageURI String?  @db.VarChar(256)

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    account          Account?
    sessions         Session[]
    createdCampaign  Campaign[]
    createdEmergency Emergency[]
    joinedCampaign   JOIN_CompaignUser[]
    reportedCampaign REPORT_CompaignUser[]
    donedCampaign    DONE_CompaignUser[]
    absentCampaign ABSENT_CompaignUser[]
    notdoneCampaign NOTDONE_CompaignUser[]
    donedEmergency   DONE_EmergencyUser[]
    gps UserGPS?
    subscribedGPS SUBSCRIBE_UserGPS[]
    @@map("user_info")
}

model Campaign {
    id            Int      @id @default(autoincrement())
    creatorId     Int
    title         String   @db.VarChar(1000)
    content       String   @db.VarChar(10000)
    dateTimeStart DateTime
    address       String   @db.VarChar(1000)
    gpslongti     Float
    gpslati       Float
    imageURI      String?  @db.VarChar(256)
    bannerURI      String?  @db.VarChar(256)
    status Int @default(0)

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    creator  UserInfo              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    joined   JOIN_CompaignUser[]
    reported REPORT_CompaignUser[]
    doned    DONE_CompaignUser[]
    absent ABSENT_CompaignUser[]
    notdone NOTDONE_CompaignUser[]
    @@map("campaign")
}

model Emergency {
    id        Int     @id @default(autoincrement())
    creatorId Int
    title     String  @db.VarChar(1000)
    content   String  @db.VarChar(10000)
    address   String  @db.VarChar(1000)
    gpslongti Float
    gpslati   Float
    imageURI  String? @db.VarChar(256)
    bannerURI      String?  @db.VarChar(256)
    status Int @default(1)

    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    creator UserInfo             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    doned   DONE_EmergencyUser[]
    @@map("emergency")
}

model JOIN_CompaignUser {
    id         Int @id @default(autoincrement())
    campaignId Int
    userId     Int
    status     Int @default(0)
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    user     UserInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([campaignId, userId])
    @@map("join_compaign_user")
}

model REPORT_CompaignUser {
    id         Int    @id @default(autoincrement())
    campaignId Int
    userId     Int
    reason     String @db.VarChar(10000) @default("")
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    user     UserInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([campaignId, userId])
    @@map("report_compaign_user")
}

model DONE_CompaignUser {
    id         Int    @id @default(autoincrement())
    campaignId Int
    userId     Int
    comment    String @db.VarChar(10000) @default("")
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    user     UserInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([campaignId, userId])
    @@map("done_compaign_user")
}

model NOTDONE_CompaignUser {
    id         Int    @id @default(autoincrement())
    campaignId Int
    userId     Int
    comment    String @db.VarChar(10000) @default("")
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    user     UserInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([campaignId, userId])
    @@map("notdone_compaign_user")
}

model ABSENT_CompaignUser {
    id         Int    @id @default(autoincrement())
    campaignId Int
    userId     Int
    reason    String @db.VarChar(10000) @default("")
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    user     UserInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([campaignId, userId])
    @@map("absent_compaign_user")
}

model DONE_EmergencyUser {
    id          Int @id @default(autoincrement())
    emergencyId Int
    userId      Int
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    emergency Emergency @relation(fields: [emergencyId], references: [id], onDelete: Cascade)
    user      UserInfo  @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([emergencyId, userId])
    @@map("done_emergency_user")
}

model UserGPS {
    id          Int @id @default(autoincrement())
    userId Int
    longitude Float
    latitude Float
    liveStatus Int @default(1)
    
    createdAt DateTime @default(now()) @db.DateTime(0)
    updatedAt DateTime @default(now()) @db.DateTime(0)

    user UserInfo @relation(fields: [userId], references: [id], onDelete: Cascade)
    subscriptions SUBSCRIBE_UserGPS[]

    @@unique([userId])
    @@map("user_gps")
}

model SUBSCRIBE_UserGPS {
    id          Int @id @default(autoincrement())
    userGPSId Int
    subscriberId Int

    userGPS UserGPS @relation(fields: [userGPSId], references: [id], onDelete: Cascade)
    subscriber      UserInfo  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
    @@unique([userGPSId, subscriberId], name: "unique_SUBSCRIBE")
    @@map("track_user_gps")
}